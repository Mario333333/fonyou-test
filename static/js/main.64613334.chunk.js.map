{"version":3,"sources":["app_context.ts","components/CharacterCard/index.tsx","components/CharacterInformation/index.tsx","redux/actions/characters.ts","views/Home/index.tsx","utils/i18n/lang.ts","utils/services/intance.ts","containers/MainLayout/components/Navbar/index.tsx","containers/MainLayout/index.tsx","hooks/useAxios.ts","App.tsx","reportWebVitals.ts","redux/reducers/characters.ts","redux/store.ts","index.tsx"],"names":["context","React","createContext","CharacterCard","character","setDataToModal","className","onClick","isVisible","data","src","image","alt","name","CharacterInformation","labels","useContext","app_context","id","status","species","gender","origin","location","type","setCharacters","connect","state","dispatch","useState","dataToModal","undefined","map","item","index","languages","en","home","search","reload","es","instance","axios","create","baseURL","characters","setSearch","searchCharacter","a","get","params","response","results","console","log","updateSearch","value","onChange","target","MainLayout","children","useAxios","url","setData","error","setError","useEffect","getData","currentLanguage","setCurrentlanguage","Provider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","charactersReducer","action","reducers","combineReducers","createStore","ReactDOM","render","store","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.64613334.chunk.js","sourcesContent":["import React from \"react\";\nimport Context from \"./utils/ts/contextType\";\nconst context: React.Context<Context> = React.createContext({});\nexport default context;\n","import React, { Dispatch } from \"react\";\nimport { Character, DataToModal } from \"../../utils/ts/componentTypes\";\ninterface Props {\n  character: Character;\n  setDataToModal: Dispatch<DataToModal>;\n}\nconst CharacterCard: React.FC<Props> = ({ character, setDataToModal }) => {\n  const handleClickCard = () => {\n    setDataToModal({\n      isVisible: true,\n      data: character,\n    });\n  };\n  return (\n    <div className=\"character\" onClick={handleClickCard}>\n      <img src={character.image} alt=\"character\"></img>\n      <div>\n        <h1>{character.name}</h1>\n      </div>\n    </div>\n  );\n};\nexport default CharacterCard;\n","import React, { Dispatch, useContext } from \"react\";\nimport Context from \"../../utils/ts/contextType\";\nimport { Character, DataToModal } from \"../../utils/ts/componentTypes\";\nimport app_context from \"../../app_context\";\ninterface Props {\n  character: Character | null;\n  setDataToModal: Dispatch<DataToModal>;\n}\nconst CharacterInformation: React.FC<Props> = ({\n  character,\n  setDataToModal,\n}) => {\n  const context: Context = useContext(app_context);\n  const { labels } = context;\n  return character !== null ? (\n    <div id=\"character-info\" className=\"character-information\">\n      <span\n        onClick={() => {\n          setDataToModal({\n            isVisible: false,\n            data: null,\n          });\n        }}\n      >\n        X\n      </span>\n      <img src={character.image} alt=\"character\"></img>\n      <div>\n        <h1>{character.name}</h1>\n        <p>{`${labels?.status}: ${character.status}`}</p>\n        <p>{`${labels?.species}: ${character.species}`}</p>\n        <p>{`${labels?.gender}: ${character.gender}`}</p>\n        <p>{`${labels?.origin}: ${character.origin.name}`}</p>\n        <p>{`${labels?.location}: ${character.location.name}`}</p>\n        <p>{`${labels?.type}: ${character.type}`}</p>\n      </div>\n    </div>\n  ) : null;\n};\n\nexport default CharacterInformation;\n","import { SetCharacter } from \"../../utils/ts/functionTypes\";\n\nexport const setCharacters: SetCharacter = (data) => ({\n  type: \"SET_CHARACTERS\",\n  data,\n});\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport { Dispatch, useContext, useEffect, useRef, useState } from \"react\";\nimport app_context from \"../../app_context\";\nimport Context from \"../../utils/ts/contextType\";\nimport CharacterCard from \"../../components/CharacterCard\";\nimport CharacterInformation from \"../../components/CharacterInformation\";\nimport { Character, DataToModal, State } from \"../../utils/ts/componentTypes\";\nimport { setCharacters } from \"../../redux/actions/characters\";\nimport { connect } from \"react-redux\";\n\nconst Home = () => {\n  const context: Context = useContext(app_context);\n  const [dataToModal, setDataToModal] = useState<DataToModal>({\n    isVisible: false,\n    data: null,\n  });\n\n  const { data } = context;\n\n  return (\n    <>\n      <div\n        id={\"home\"}\n        className=\"home-container\"\n        onClick={() => {\n          if (dataToModal.isVisible === true) {\n            setDataToModal({ isVisible: false, data: null });\n          }\n        }}\n      >\n        {data !== null &&\n          data !== undefined &&\n          data.map((item, index) => {\n            return (\n              <CharacterCard\n                key={index}\n                character={item}\n                setDataToModal={setDataToModal}\n              />\n            );\n          })}\n      </div>\n      {dataToModal.isVisible && (\n        <CharacterInformation\n          character={dataToModal.data}\n          setDataToModal={setDataToModal}\n        />\n      )}\n    </>\n  );\n};\nconst mapDispatchToProps = (dispatch: Dispatch<any>) => ({\n  setCharacters: (data: Array<Character>) => dispatch(setCharacters(data)),\n});\nconst mapStateToPros = (state: State) => ({});\nexport default connect(mapStateToPros, mapDispatchToProps)(Home);\n","import { Languages } from \"../ts/languages\";\n\nconst languages: Languages = {\n  en: {\n    home: \"Home\",\n    search: \"Search\",\n    status: \"Status\",\n    species: \"Specie\",\n    gender: \"Gender\",\n    origin: \"Origin\",\n    location: \"Location\",\n    type: \"Type\",\n    reload: \"Update\",\n  },\n  es: {\n    home: \"Inicio\",\n    search: \"Buscar\",\n    status: \"Estatus\",\n    species: \"Especie\",\n    gender: \"Genero\",\n    origin: \"Origen\",\n    location: \"Ubicación\",\n    type: \"Tipo\",\n    reload: \"Actualizar\",\n  },\n};\n\nexport default languages;\n","import axios, { AxiosInstance } from \"axios\";\n\nconst instance: AxiosInstance = axios.create({\n  baseURL:\n    process.env.NODE_ENV === \"development\"\n      ? `https://rickandmortyapi.com/api`\n      : `https://rickandmortyapi.com/api`,\n});\n\nexport default instance;\n","import { Dispatch, useContext, useState } from \"react\";\nimport axios from \"../../../../utils/services/intance\";\nimport app_context from \"../../../../app_context\";\nimport Context from \"../../../../utils/ts/contextType\";\nimport { connect } from \"react-redux\";\nimport { Character, State } from \"../../../../utils/ts/componentTypes\";\nimport { setCharacters } from \"../../../../redux/actions/characters\";\n\nconst Navbar = ({ setCharacters }: any) => {\n  const [search, setSearch] = useState(\"\");\n\n  const context: Context = useContext(app_context);\n  const { labels } = context;\n\n  const handleSearch = ({ target }: any) => {\n    setSearch(target.value);\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n  };\n\n  const searchCharacter = async () => {\n    try {\n      const response = await axios.get(\"character\", {\n        params: { name: search },\n      });\n      setCharacters(response.data.results);\n    } catch (error) {\n      console.log(error);\n    }\n    setSearch(\"\");\n  };\n\n  const updateSearch = async () => {\n    try {\n      const response = await axios.get(\"character\");\n      setCharacters(response.data.results);\n      setSearch(\"\");\n    } catch (error) {\n      console.log(error);\n    }\n    setSearch(\"\");\n  };\n\n  return (\n    <nav className=\"menu\">\n      <ul>\n        <li className=\"search-component\">\n          <input type=\"text\" value={search} onChange={handleSearch} />\n          <button onClick={searchCharacter}>{labels?.search}</button>\n        </li>\n        <li className=\"search-component\">\n          <button onClick={updateSearch}>{labels?.reload}</button>\n        </li>\n      </ul>\n    </nav>\n  );\n};\n\nconst mapStateToProps = (state: State) => {\n  const { characters } = state;\n  return characters;\n};\nconst mapDispatchToProps = (dispatch: Dispatch<any>) => ({\n  setCharacters: (data: Array<Character>) => dispatch(setCharacters(data)),\n});\nexport default connect(mapStateToProps, mapDispatchToProps)(Navbar);\n","import { NavbarProps } from \"../../utils/ts/componentTypes\";\nimport Navbar from \"./components/Navbar/index\";\n\nconst MainLayout: React.FC<NavbarProps> = ({ id, className, children }) => {\n  return (\n    <div id={id} className={`page__layout ${className}`}>\n      <div className=\"content\">\n        <Navbar />\n        <div className=\"container\">{children}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default MainLayout;\n","import { useEffect, useState } from \"react\";\nimport axios from \"../utils/services/intance\";\nimport { AxiosType } from \"../utils/ts/functionTypes\";\n\nconst useAxios: AxiosType = <Type>(\n  url: string,\n  params: { [key: string]: string } | null\n) => {\n  const [data, setData] = useState<Type | null>(null);\n  const [error, setError] = useState(false);\n\n  useEffect(() => {\n    const getData = async () => {\n      try {\n        let response;\n        if (params !== null) {\n          response = await axios.get(url, params);\n          setData(response.data);\n        } else {\n          response = await axios.get(url);\n          setData(response.data);\n        }\n      } catch (error) {\n        setError(true);\n      }\n    };\n    getData();\n  }, [url]);\n  return { data, error };\n};\n\nexport default useAxios;\n","import { Dispatch, useEffect, useState } from \"react\";\n\nimport { connect } from \"react-redux\";\nimport Home from \"./views/Home\";\nimport languages from \"./utils/i18n/lang\";\nimport AppContext from \"./app_context\";\nimport MainLayout from \"./containers/MainLayout\";\nimport { Language } from \"./utils/ts/languages\";\nimport useAxios from \"./hooks/useAxios\";\n\nimport { setCharacters } from \"./redux/actions/characters\";\nimport { Character, Characters, State } from \"./utils/ts/componentTypes\";\n\nconst App = ({ characters, setCharacters }: any) => {\n  const { data } = useAxios<Characters>(\"character\", null);\n  const [currentLanguage, setCurrentlanguage] = useState<string>(\"es\");\n  const [labels] = useState<Language>(languages[\"es\"]);\n\n  useEffect(() => {\n    if (data !== null) {\n      setCharacters(data.results);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [data]);\n\n  return (\n    <AppContext.Provider\n      value={{\n        labels,\n        currentLanguage,\n        setCurrentlanguage,\n        data: characters,\n      }}\n    >\n      <MainLayout>\n        <Home />\n      </MainLayout>\n    </AppContext.Provider>\n  );\n};\nconst mapStateToProps = (state: State) => {\n  const { characters } = state;\n  return characters;\n};\nconst mapDispatchToProps = (dispatch: Dispatch<any>) => ({\n  setCharacters: (data: Array<Character>) => dispatch(setCharacters(data)),\n});\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { Character, State } from \"../../utils/ts/componentTypes\";\n\nconst initialState: State = {\n  characters: null,\n};\n\nconst charactersReducer = (\n  state = initialState,\n  action: { type: string; data: Array<Character> }\n) => {\n  switch (action.type) {\n    case \"SET_CHARACTERS\":\n      return {\n        ...state,\n        characters: action.data,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default charactersReducer;\n","import { createStore, combineReducers } from \"redux\";\n\nimport characters from \"./reducers/characters\";\n\nconst reducers = combineReducers({\n  characters,\n});\n\nexport default createStore(reducers);\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport store from \"./redux/store\";\n\nimport { Provider } from \"react-redux\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}